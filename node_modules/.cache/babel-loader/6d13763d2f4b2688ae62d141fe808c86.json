{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\davek\\\\Desktop\\\\Project\\\\musicplayer\\\\musicpplayer\\\\src\\\\components\\\\Player.js\",\n    _s = $RefreshSig$();\n\nimport { React, useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  sendingprop2,\n  isPlaying,\n  setisPlaying\n}) => {\n  _s();\n\n  //this is a reference of audio we are using so that it can be accessed in javascript \n  const audioRef = useRef(null); //playerhandler is a function that do the pause and play . if song is playing then it will pause . and make isPlaying reverse of isplaying\n\n  const playerhandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setisPlaying(!isPlaying);\n    } //when we start the song its always false soo now . this else will make it set Isplaying true.\n    else {\n        audioRef.current.play();\n        setisPlaying(!isPlaying);\n      }\n  }; //this funtion will fetch the duration of the song and the instant of time we are in the song. \n  //and also it is setting the songinfo's currentTime to current and duration to duration.\n\n\n  const handlertimecontrol = e => {\n    const duration = e.target.duration;\n    const current = e.target.currentTime;\n    setsonginfo({ ...songinfo,\n      currentTime: current,\n      duration: duration\n    });\n  }; //by default we are setting the songinfo current time and duration be 0. dont put null here or it will give error\n\n\n  const [songinfo, setsonginfo] = useState({\n    currentTime: 0,\n    duration: 0\n  }); //this funtion is making the time more readable.\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  }; //draghandler is making the songs dragable so that we can drag it and skip-forward and backward.\n\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setsonginfo({ ...songinfo,\n      currentTime: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songinfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        min: 0,\n        max: songinfo.duration,\n        onChange: dragHandler,\n        value: songinfo.currentTime,\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [getTime(songinfo.duration), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playerhandler,\n        className: \"play\",\n        size: \"2x\" //the icon will change if isplaying true then faPause will be shown if not the faplay.\n        ,\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      //this audio tag is important in our whole app.\n      onTimeUpdate: handlertimecontrol,\n      onLoadedMetadata: handlertimecontrol,\n      ref: audioRef,\n      src: sendingprop2.audio,\n      onChange: dragHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"nnnSXHJ9skT3bLaduEUfpVPVfZQ=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/davek/Desktop/Project/musicplayer/musicpplayer/src/components/Player.js"],"names":["React","useRef","useState","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","sendingprop2","isPlaying","setisPlaying","audioRef","playerhandler","current","pause","play","handlertimecontrol","e","duration","target","currentTime","setsonginfo","songinfo","getTime","time","Math","floor","slice","dragHandler","value","audio"],"mappings":"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","sourcesContent":["import { React, useRef, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faPause,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({ sendingprop2, isPlaying, setisPlaying }) => {\r\n  //this is a reference of audio we are using so that it can be accessed in javascript \r\n  const audioRef = useRef(null);\r\n  //playerhandler is a function that do the pause and play . if song is playing then it will pause . and make isPlaying reverse of isplaying\r\n  const playerhandler = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n      setisPlaying(!isPlaying);\r\n    } \r\n    //when we start the song its always false soo now . this else will make it set Isplaying true.\r\n    else {\r\n      audioRef.current.play();\r\n      setisPlaying(!isPlaying);\r\n    }\r\n  };\r\n  //this funtion will fetch the duration of the song and the instant of time we are in the song. \r\n  //and also it is setting the songinfo's currentTime to current and duration to duration.\r\n  const handlertimecontrol = (e) => {\r\n    const duration = e.target.duration;\r\n    const current = e.target.currentTime;\r\n    setsonginfo({ ...songinfo, currentTime: current, duration: duration });\r\n  };\r\n  //by default we are setting the songinfo current time and duration be 0. dont put null here or it will give error\r\n  const [songinfo, setsonginfo] = useState({\r\n    currentTime: 0,\r\n    duration: 0,\r\n  });\r\n  //this funtion is making the time more readable.\r\n  const getTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n  //draghandler is making the songs dragable so that we can drag it and skip-forward and backward.\r\n  const dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n    setsonginfo({ ...songinfo, currentTime: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{getTime(songinfo.currentTime)}</p>\r\n        <input\r\n          min={0}\r\n          max={songinfo.duration}\r\n          onChange={dragHandler}\r\n          value={songinfo.currentTime}\r\n          type=\"range\"\r\n        />\r\n        <p>{getTime(songinfo.duration)} </p>\r\n      </div>\r\n      <div className=\"player-control\">\r\n        <FontAwesomeIcon className=\"skip-back\" size=\"2x\" icon={faAngleLeft} />\r\n        <FontAwesomeIcon\r\n          onClick={playerhandler}\r\n          className=\"play\"\r\n          size=\"2x\"\r\n          //the icon will change if isplaying true then faPause will be shown if not the faplay.\r\n          icon={isPlaying ? faPause : faPlay}\r\n        />\r\n        <FontAwesomeIcon\r\n          className=\"skip-forward\"\r\n          size=\"2x\"\r\n          icon={faAngleRight}\r\n        />\r\n      </div>\r\n      \r\n      <audio\r\n      //this audio tag is important in our whole app.\r\n        onTimeUpdate={handlertimecontrol}\r\n        onLoadedMetadata={handlertimecontrol}\r\n        ref={audioRef}\r\n        src={sendingprop2.audio}\r\n        onChange={dragHandler}\r\n      ></audio>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n"]},"metadata":{},"sourceType":"module"}