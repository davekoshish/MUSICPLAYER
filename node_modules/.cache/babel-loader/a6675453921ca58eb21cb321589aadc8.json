{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\davek\\\\Desktop\\\\Project\\\\musicplayer\\\\musicpplayer\\\\src\\\\components\\\\Librarysong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function librarysong({\n  audioRef,\n  song,\n  songs,\n  setcurrentSong,\n  id,\n  setSongs,\n  isPlaying\n}) {\n  //this is an indiviual song on the libary section\n  const songSelector = () => {\n    const selectedSong = songs.filter(state => state.id === id);\n    setcurrentSong({ ...selectedSong[0]\n    }); //Set Active in library\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelector,\n    className: `library-song ${song.active ? \"selected\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"song-cover\",\n      src: song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/davek/Desktop/Project/musicplayer/musicpplayer/src/components/Librarysong.js"],"names":["React","librarysong","audioRef","song","songs","setcurrentSong","id","setSongs","isPlaying","songSelector","selectedSong","filter","state","newSongs","map","active","cover","name","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,eAAe,SAASC,WAAT,CAAqB;AAClCC,EAAAA,QADkC;AAElCC,EAAAA,IAFkC;AAGlCC,EAAAA,KAHkC;AAIlCC,EAAAA,cAJkC;AAKlCC,EAAAA,EALkC;AAMlCC,EAAAA,QANkC;AAOlCC,EAAAA;AAPkC,CAArB,EAQZ;AACD;AACA,QAAMC,YAAY,GAAG,MAAM;AACzB,UAAMC,YAAY,GAAGN,KAAK,CAACO,MAAN,CAAcC,KAAD,IAAWA,KAAK,CAACN,EAAN,KAAaA,EAArC,CAArB;AACAD,IAAAA,cAAc,CAAC,EAAE,GAAGK,YAAY,CAAC,CAAD;AAAjB,KAAD,CAAd,CAFyB,CAGzB;;AACA,UAAMG,QAAQ,GAAGT,KAAK,CAACU,GAAN,CAAWX,IAAD,IAAU;AACnC,UAAIA,IAAI,CAACG,EAAL,KAAYA,EAAhB,EAAoB;AAClB,eAAO,EACL,GAAGH,IADE;AAELY,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGZ,IADE;AAELY,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID;AACF,KAZgB,CAAjB;AAcAR,IAAAA,QAAQ,CAACM,QAAD,CAAR;AAED,GApBD;;AAsBA,sBACE;AACE,IAAA,OAAO,EAAEJ,YADX;AAEE,IAAA,SAAS,EAAG,gBAAeN,IAAI,CAACY,MAAL,GAAc,UAAd,GAA2B,EAAG,EAF3D;AAAA,4BAIE;AAAK,MAAA,GAAG,EAAC,YAAT;AAAsB,MAAA,GAAG,EAAEZ,IAAI,CAACa;AAAhC;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,kBAAKb,IAAI,CAACc;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKd,IAAI,CAACe;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD","sourcesContent":["import React from \"react\";\r\n\r\n\r\nexport default function librarysong({\r\n  audioRef,\r\n  song,\r\n  songs,\r\n  setcurrentSong,\r\n  id,\r\n  setSongs,\r\n  isPlaying,\r\n}) {\r\n  //this is an indiviual song on the libary section\r\n  const songSelector = () => {\r\n    const selectedSong = songs.filter((state) => state.id === id);\r\n    setcurrentSong({ ...selectedSong[0] });\r\n    //Set Active in library\r\n    const newSongs = songs.map((song) => {\r\n      if (song.id === id) {\r\n        return {\r\n          ...song,\r\n          active: true,\r\n        };\r\n      } else {\r\n        return {\r\n          ...song,\r\n          active: false,\r\n        };\r\n      }\r\n    });\r\n\r\n    setSongs(newSongs);\r\n    \r\n  };\r\n\r\n  return (\r\n    <div\r\n      onClick={songSelector}\r\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\r\n    >\r\n      <img alt=\"song-cover\" src={song.cover} />\r\n      <div className=\"song-description\">\r\n        <h3>{song.name}</h3>\r\n        <h4>{song.artist}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}