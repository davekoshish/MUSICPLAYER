{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\davek\\\\Desktop\\\\Project\\\\musicplayer\\\\musicpplayer\\\\src\\\\components\\\\Player.js\";\nimport { React } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  songs,\n  setsonginfo,\n  songinfo,\n  audioRef,\n  currentSong,\n  isPlaying,\n  setisPlaying,\n  setcurrentSong\n}) => {\n  //this is a reference of audio we are using so that it can be accessed in javascript\n  //playerhandler is a function that do the pause and play . if song is playing then it will pause . and make isPlaying reverse of isplaying\n  const playerhandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setisPlaying(!isPlaying);\n    } //when we start the song its always false soo now . this else will make it set Isplaying true.\n    else {\n        audioRef.current.play();\n        setisPlaying(!isPlaying);\n      }\n  }; //this funtion will fetch the duration of the song and the instant of time we are in the song.\n  //and also it is setting the songinfo's currentTime to current and duration to duration.\n  //this funtion is making the time more readable.\n\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  }; //draghandler is making the songs dragable so that we can drag it and skip-forward and backward.\n\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setsonginfo({ ...songinfo,\n      currentTime: e.target.value\n    });\n  };\n\n  const skipTrackHandler = direction => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === 'skip-forward') {\n      //we put it here the modules casue when the songs reaches the last index it will gonna refresh to 0 index.\n      setcurrentSong(songs[(currentIndex + 1) % songs.length]);\n    }\n\n    if (direction === 'skip-back') {\n      //we put it here the modules casue when the songs reaches the last index it will gonna refresh to 0 index.\n      setcurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songinfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        min: 0,\n        max: songinfo.duration || 0,\n        onChange: dragHandler,\n        value: songinfo.currentTime,\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [getTime(songinfo.duration), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler('skip-back'),\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playerhandler,\n        className: \"play\",\n        size: \"2x\" //the icon will change if isplaying true then faPause will be shown if not the faplay.\n        ,\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler('skip-forward'),\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/davek/Desktop/Project/musicplayer/musicpplayer/src/components/Player.js"],"names":["React","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","songs","setsonginfo","songinfo","audioRef","currentSong","isPlaying","setisPlaying","setcurrentSong","playerhandler","current","pause","play","getTime","time","Math","floor","slice","dragHandler","e","currentTime","target","value","skipTrackHandler","direction","currentIndex","findIndex","song","id","length","duration"],"mappings":"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","sourcesContent":["import { React, } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faPause,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({\r\n  songs,\r\n  setsonginfo,\r\n  songinfo,\r\n  audioRef,\r\n  currentSong,\r\n  isPlaying,\r\n  setisPlaying,\r\n  setcurrentSong,\r\n}) => {\r\n  //this is a reference of audio we are using so that it can be accessed in javascript\r\n\r\n  //playerhandler is a function that do the pause and play . if song is playing then it will pause . and make isPlaying reverse of isplaying\r\n  const playerhandler = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n      setisPlaying(!isPlaying);\r\n    }\r\n    //when we start the song its always false soo now . this else will make it set Isplaying true.\r\n    else {\r\n      audioRef.current.play();\r\n      setisPlaying(!isPlaying);\r\n    }\r\n  };\r\n  //this funtion will fetch the duration of the song and the instant of time we are in the song.\r\n  //and also it is setting the songinfo's currentTime to current and duration to duration.\r\n  //this funtion is making the time more readable.\r\n  const getTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n  //draghandler is making the songs dragable so that we can drag it and skip-forward and backward.\r\n  const dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n    setsonginfo({ ...songinfo, currentTime: e.target.value });\r\n  };\r\n\r\n  const skipTrackHandler = (direction) =>\r\n  {\r\n    let currentIndex=songs.findIndex((song)=>song.id === currentSong.id);\r\n    if(direction ==='skip-forward'){ \r\n      //we put it here the modules casue when the songs reaches the last index it will gonna refresh to 0 index.\r\n      setcurrentSong(songs[(currentIndex+1) % songs.length]);\r\n    }\r\n    if(direction ==='skip-back'){ \r\n      //we put it here the modules casue when the songs reaches the last index it will gonna refresh to 0 index.\r\n      setcurrentSong(songs[(currentIndex-1) % songs.length]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{getTime(songinfo.currentTime)}</p>\r\n        <input\r\n          min={0}\r\n          max={songinfo.duration || 0}\r\n          onChange={dragHandler}\r\n          value={songinfo.currentTime}\r\n          type=\"range\"\r\n        />\r\n        <p>{getTime(songinfo.duration)} </p>\r\n      </div>\r\n      <div className=\"player-control\">\r\n        <FontAwesomeIcon onClick={()=>skipTrackHandler('skip-back')} className=\"skip-back\" size=\"2x\" icon={faAngleLeft} />\r\n        <FontAwesomeIcon\r\n          onClick={playerhandler}\r\n          className=\"play\"\r\n          size=\"2x\"\r\n          //the icon will change if isplaying true then faPause will be shown if not the faplay.\r\n          icon={isPlaying ? faPause : faPlay}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={()=>skipTrackHandler('skip-forward')}\r\n          className=\"skip-forward\"\r\n          size=\"2x\"\r\n          icon={faAngleRight}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n"]},"metadata":{},"sourceType":"module"}