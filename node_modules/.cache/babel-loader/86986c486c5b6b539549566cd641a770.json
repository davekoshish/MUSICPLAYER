{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\davek\\\\Desktop\\\\Project\\\\musicplayer\\\\musicpplayer\\\\src\\\\components\\\\Player.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  songs,\n  setSongs,\n  setsonginfo,\n  songinfo,\n  audioRef,\n  currentSong,\n  isPlaying,\n  setisPlaying,\n  setcurrentSong\n}) => {\n  _s();\n\n  useEffect(() => {\n    const newSongs = songs.map(song => {\n      if (song.id === currentSong.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs);\n  }, [currentSong]); //this is a reference of audio we are using so that it can be accessed in javascript\n  //playerhandler is a function that do the pause and play . if song is playing then it will pause . and make isPlaying reverse of isplaying\n\n  const playerhandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setisPlaying(!isPlaying);\n    } //when we start the song its always false soo now . this else will make it set Isplaying true.\n    else {\n        audioRef.current.play();\n        setisPlaying(!isPlaying);\n      }\n  }; //this funtion will fetch the duration of the song and the instant of time we are in the song.\n  //and also it is setting the songinfo's currentTime to current and duration to duration.\n  //this funtion is making the time more readable.\n\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  }; //draghandler is making the songs dragable so that we can drag it and skip-forward and backward.\n\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setsonginfo({ ...songinfo,\n      currentTime: e.target.value\n    });\n  };\n\n  const skipTrackHandler = async direction => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === \"skip-forward\") {\n      //we put it here the modules casue when the songs reaches the last index it will gonna refresh to 0 index.\n      await setcurrentSong(songs[(currentIndex + 1) % songs.length]);\n    }\n\n    if (direction === \"skip-back\") {\n      //we put it here the modules casue when the songs reaches the last index it will gonna refresh to 0 index.\n      if ((currentIndex - 1) % songs.length === -1) {\n        setcurrentSong(songs[songs.length - 1]);\n        return;\n      }\n\n      setcurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n\n    if (isPlaying) audioRef.current.play();\n  }; //add the styles\n\n\n  const trackAnim = {\n    transform: `translateX(${songinfo.animationPercentage}%)`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songinfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: `linear-gradient(to right,${currentSong.color[0]},${currentSong.color[1]})`\n        },\n        className: \"track\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          min: 0,\n          max: songinfo.duration || 0,\n          onChange: dragHandler,\n          value: songinfo.currentTime,\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: trackAnim,\n          className: \"animate-track\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [songinfo.duration ? getTime(songinfo.duration) : \"0:00\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler(\"skip-back\"),\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playerhandler,\n        className: \"play\",\n        size: \"2x\" //the icon will change if isplaying true then faPause will be shown if not the faplay.\n        ,\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler(\"skip-forward\"),\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/davek/Desktop/Project/musicplayer/musicpplayer/src/components/Player.js"],"names":["React","useEffect","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","songs","setSongs","setsonginfo","songinfo","audioRef","currentSong","isPlaying","setisPlaying","setcurrentSong","newSongs","map","song","id","active","playerhandler","current","pause","play","getTime","time","Math","floor","slice","dragHandler","e","currentTime","target","value","skipTrackHandler","direction","currentIndex","findIndex","length","trackAnim","transform","animationPercentage","background","color","duration"],"mappings":"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","sourcesContent":["import { React, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faPause,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst Player = ({\r\n  songs,\r\n  setSongs,\r\n  setsonginfo,\r\n  songinfo,\r\n  audioRef,\r\n  currentSong,\r\n  isPlaying,\r\n  setisPlaying,\r\n  setcurrentSong,\r\n  \r\n}) => {\r\n  useEffect(() => {\r\n    const newSongs = songs.map((song) => {\r\n      if (song.id === currentSong.id) {\r\n        return {\r\n          ...song,\r\n          active: true,\r\n        };\r\n      } else {\r\n        return {\r\n          ...song,\r\n          active: false,\r\n        };\r\n      }\r\n    });\r\n\r\n    setSongs(newSongs);\r\n  }, [currentSong]);\r\n  //this is a reference of audio we are using so that it can be accessed in javascript\r\n\r\n  //playerhandler is a function that do the pause and play . if song is playing then it will pause . and make isPlaying reverse of isplaying\r\n  const playerhandler = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n      setisPlaying(!isPlaying);\r\n    }\r\n    //when we start the song its always false soo now . this else will make it set Isplaying true.\r\n    else {\r\n      audioRef.current.play();\r\n      setisPlaying(!isPlaying);\r\n    }\r\n  };\r\n  //this funtion will fetch the duration of the song and the instant of time we are in the song.\r\n  //and also it is setting the songinfo's currentTime to current and duration to duration.\r\n  //this funtion is making the time more readable.\r\n  const getTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n  //draghandler is making the songs dragable so that we can drag it and skip-forward and backward.\r\n  const dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n    setsonginfo({ ...songinfo, currentTime: e.target.value });\r\n  };\r\n\r\n  const skipTrackHandler = async (direction) => {\r\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n    if (direction === \"skip-forward\") {\r\n      //we put it here the modules casue when the songs reaches the last index it will gonna refresh to 0 index.\r\n     await setcurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n    }\r\n    if (direction === \"skip-back\") {\r\n      //we put it here the modules casue when the songs reaches the last index it will gonna refresh to 0 index.\r\n      if ((currentIndex - 1) % songs.length === -1) {\r\n        setcurrentSong(songs[songs.length - 1]);\r\n        \r\n        return;\r\n      }\r\n      setcurrentSong(songs[(currentIndex - 1) % songs.length]);\r\n    }\r\n    if(isPlaying) audioRef.current.play();\r\n  };\r\n  //add the styles\r\n  const trackAnim = {\r\n    transform: `translateX(${songinfo.animationPercentage}%)`\r\n  };\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{getTime(songinfo.currentTime)}</p>\r\n        <div style={{background:`linear-gradient(to right,${currentSong.color[0]},${currentSong.color[1]})`}} className=\"track\">\r\n          <input\r\n            min={0}\r\n            max={songinfo.duration || 0}\r\n            onChange={dragHandler}\r\n            value={songinfo.currentTime}\r\n            type=\"range\"\r\n          />\r\n          <div style={trackAnim} className=\"animate-track\"></div>\r\n        </div>\r\n        <p>{songinfo.duration ? getTime(songinfo.duration) : \"0:00\"} </p>\r\n      </div>\r\n      <div className=\"player-control\">\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-back\")}\r\n          className=\"skip-back\"\r\n          size=\"2x\"\r\n          icon={faAngleLeft}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={playerhandler}\r\n          className=\"play\"\r\n          size=\"2x\"\r\n          //the icon will change if isplaying true then faPause will be shown if not the faplay.\r\n          icon={isPlaying ? faPause : faPlay}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-forward\")}\r\n          className=\"skip-forward\"\r\n          size=\"2x\"\r\n          icon={faAngleRight}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n"]},"metadata":{},"sourceType":"module"}